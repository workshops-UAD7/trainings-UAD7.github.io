{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the UA Data Science Trainings","text":"<p>(This site: <code>https://workshops-uad7.github.io/</code>)</p> <p></p> <p>(Credit: Photo by author. University of Arizona, Tucson, AZ.)</p>"},{"location":"#available-training-materials","title":"Available training materials","text":""},{"location":"#command-line-interface","title":"Command Line Interface","text":"<ul> <li>Command Line Interface - Unix Shell</li> <li>The Command Line Interface Shell</li> <li>UNIX Shell Command Line Programming</li> </ul>"},{"location":"#git-github","title":"Git &amp; Github","text":"<ul> <li>Introduction to Github</li> <li>Introduction to Github Wikis</li> <li>Github Wikis and Github Pages</li> </ul>"},{"location":"#working-in-data-science-with-python","title":"Working in Data Science with Python","text":"<ul> <li>Python for Data Science</li> <li>Machine Learning Algorithms</li> <li>Data Science in Bioinformatics</li> <li>Data Science in Earth Sciences</li> </ul>"},{"location":"#ai-tools-prompt-engineering","title":"AI Tools / Prompt Engineering","text":"<ul> <li>AI Tools Landscape</li> </ul>"},{"location":"#general-data-science-learning-resources","title":"General Data Science Learning Resources","text":"<ul> <li>A Data Science Resources Library</li> </ul> <p>Created: 05/11/2023;  Last update: 05/19/2023</p> <p>Carlos Liz\u00e1rraga-Celaya. University of Arizona, Data Science Institute.</p> <p> CC BY-NC-SA 4.0</p> <p></p>"},{"location":"Codespaces/","title":"Github Codespaces","text":"<p>GitHub Codespaces  is  a cloud-based integrated development environment  that provides pre-configured virtual machines  for coding without the need for software installation or configuration.</p>"},{"location":"Codespaces/#benefits-of-using-codespaces","title":"Benefits of using Codespaces","text":"<p>GitHub Codespaces offers a pre-configured, cloud-based, efficient, and secure environment for coding.</p>"},{"location":"Codespaces/#how-to-get-started-with-codespaces","title":"How to get started with Codespaces?","text":"<p>To create a GitHub Codespaces environment, one needs to have a GitHub account and follow these steps on the Codespaces page.</p> <p>Once your Codespaces environment is created, you can connect to it from your web browser or from the GitHub app.</p>"},{"location":"Codespaces/#the-codespaces-lifecycle","title":"The Codespaces lifecycle","text":"<p>When you create a new Codespace, all your files and work can be stored in your codespace. The coding space is executing while you are working and should be stopped when you finish your session.</p> <p>You need to restart the previous codespace when continuing in the following session. A codespace can be deleted if no longer needed.</p>"},{"location":"Codespaces/#code-developing-in-codespaces","title":"Code developing in Codespaces","text":"<p>There are several options to work with codespaces. In this tutorial, we recomend working with Visual Studio Code (aka VSCode). This can be done directly in your browser or using a locally installed  desktop version of VScode.</p>"},{"location":"Codespaces/#vscode-extensions","title":"VSCode Extensions","text":"<p>One of the advantages of VSCode is that many extensions are available for facilitating your code development. The main feature is that it very well integrated with Github, has many plugins to support software development in a wide variety of programming languages and includes a Terminal for interacting with the underlaying Operating System (UNIX/Linux).</p>"},{"location":"Codespaces/#references","title":"References","text":"<ul> <li>Signing up for a new Github account</li> <li>Github Codespaces Features</li> <li>Github Codespaces Documentation</li> <li>Visual Studio Code</li> <li>Visual Studio Code Extensions</li> <li>VSCode Documentation</li> </ul> <p>Created: 05/13/2023: Updated: 05/15/2023</p> <p>Carlos Liz\u00e1rraga</p>"},{"location":"CommandLineInterface/","title":"Command Line Interface (CLI) - Unix Shell","text":"<p>Unix shell and shell programming tutorials</p> <p>The Command Line Interface (CLI) or UNIX Shell is a text-based interface for interacting with an Operating System through typed commands.</p> <p>The shell is both an interactive command language and can execute shell scripts.</p> <p>As users we can interact with the Unix shell using a terminal.</p>"},{"location":"CommandLineInterface/#sections","title":"Sections","text":"<ul> <li>Introduction to Github Codespaces</li> <li>Introduction to the UNIX Shell and Unix filesystem</li> <li>Working with Files and Directories</li> <li>Pipes and Filters</li> <li>Loops &amp; Shell Scripts</li> </ul>"},{"location":"CommandLineInterface/#resources-used-in-this-tutorial","title":"Resources used in this tutorial","text":"<ul> <li>The Command Line Interface Shell.</li> <li>UNIX Shell Command Line Programming</li> <li>The Unix Shell. Software Carpentries.</li> <li>Introduction to Command Line for Genomics. Data Carpentry.</li> <li>Explain Shell</li> </ul> <p>Created: 05/11/2023;  Last update: 05/15/2023</p> <p>Carlos Liz\u00e1rraga-Celaya. University of Arizona, Data Science Institute.</p> <p> CC BY-NC-SA 4.0</p> <p></p>"},{"location":"Files_Dirs/","title":"Working with files and directories","text":"<p>In this section we will focus on files and directories.</p> <p>In Unix, files and directories are similar</p> <p>A computer file is a named collection of data that is stored on a computer's hard drive or other storage device. Files can contain text, images, audio, video, and other types of data. Files are typically opened and closed using a file manager or other software application.</p> <p>A directory is a named collection of files and other directories. Directories are used to organize files and make them easier to find. Directories are typically opened and closed using a file manager or other software application.</p>"},{"location":"Files_Dirs/#similarities-and-differences-between-files-and-directories","title":"Similarities and differences between files and Directories","text":""},{"location":"Files_Dirs/#similarities","title":"Similarities","text":"<ul> <li>Both files and directories are stored on the same physical disk.</li> <li>Both files and directories have names.</li> <li>Both files and directories can be owned by users and groups.</li> <li>Both files and directories can have permissions set on them.</li> <li>Both files and directories can be accessed using the same commands.</li> </ul>"},{"location":"Files_Dirs/#differences","title":"Differences","text":"<ul> <li>A file is a collection of data, while a directory is a collection of files.</li> <li>A file cannot contain other files, while a directory can contain other files and directories.</li> <li>A file can be accessed directly by its name, while a directory can only be accessed by navigating to it through the file system hierarchy.</li> </ul>"},{"location":"Files_Dirs/#list-of-commands-for-working-with-files-and-directories","title":"List of commands for working with Files and Directories","text":"<p>The following table shows some of the main Unix commands for working with files and directories:</p> Command Description <code>ls</code> List the contents of a directory <code>cd</code> Change the current directory <code>mkdir</code> Create a new directory <code>rmdir</code> Remove an empty directory <code>touch</code> Create a new empty file <code>cat</code> Display the contents of a file <code>cp</code> Copy a file <code>mv</code> Move a file <code>rm</code> Remove a file  <code>more</code> Display the contents of a file one screen at a time <code>less</code> Display the contents of a file one screen at a time and allow scrolling <code>head</code> Output the first part of file <code>tail</code> Output the last part of file <code>grep</code> Search for a pattern in a file <code>sort</code> Sort the lines in a file <code>uniq</code> Remove duplicate lines from a file <code>find</code> Find files that match a certain criteria <code>chmod</code> Change the permissions on a file <code>chown</code> Change the ownership of a file <code>ln</code> Create a link to a file <code>tar</code> Create a compressed archive of a file or directory <code>gzip</code> Compress or decompress a file <code>bzip2</code> Compress or decompress a file"},{"location":"Files_Dirs/#references","title":"References","text":"<ul> <li>The Command Line Interface Shell</li> <li>Working with Files and Directories</li> <li>explainshell.com</li> </ul> <p>Created: 05/13/2023: Updated: 05/15/2023</p> <p>Carlos Liz\u00e1rraga</p>"},{"location":"Loops_Scripts/","title":"Shell Scripts","text":""},{"location":"Loops_Scripts/#what-is-a-shell-script","title":"What is a shell script?","text":"<p>A shell script is a text file that contains a series of commands that can be executed by the shell. The shell is a program that interprets and executes commands. The most common shell on Linux is bash.</p>"},{"location":"Loops_Scripts/#how-to-write-a-shell-script","title":"How to write a shell script","text":"<p>To write a shell script, you can use any text editor. The following is an example of a simple shell script:</p> <pre><code>#!/bin/bash\necho \"Hello, world!\"\necho \"The current date and time is $(date)\"\n</code></pre> <p>This script will print the message \"Hello, world!\" to the console.</p>"},{"location":"Loops_Scripts/#how-to-run-a-shell-script","title":"How to run a shell script","text":"<p>To run a shell script, you can use the following command:</p> <pre><code>bash &lt;script_name&gt;\n</code></pre> <p>For example, to run the script above, you would use the following command:</p> <pre><code>bash hello_world.sh\n</code></pre>"},{"location":"Loops_Scripts/#variables","title":"Variables","text":"<p>Variables are used to store data in shell scripts. To declare a variable, you use the following syntax:</p> <pre><code>variable_name=value\n</code></pre> <p>For example, the following code declares a variable named name and assigns it the value \"John Doe\":</p> <pre><code>name=\"John Doe\"\n</code></pre> <p>You can then access the value of the variable by using its name. For example, the following code will print the value of the <code>name</code> variable:</p> <pre><code>echo $name\n</code></pre>"},{"location":"Loops_Scripts/#conditional-statements","title":"Conditional statements","text":"<p>Conditional statements are used to control the flow of execution in shell scripts. The most common conditional statements are <code>if</code>, <code>else</code>, and <code>elif</code>:</p> <ul> <li>The <code>if</code> statement is used to execute a block of code if a condition is met.</li> <li>The <code>else</code> statement is used to execute a block of code if the condition in the <code>if</code> statement is not met.</li> <li>The <code>elif</code> statement is used to execute a block of code if a condition is met, but the condition in the <code>if</code> statement is not met.</li> </ul> <p>For example, the following code will print the message \"Hello, world!\" if the variable <code>name</code> is not empty:</p> <pre><code>if [ -n \"$name\" ]; then\necho \"Hello, $name!\"\nfi\n</code></pre>"},{"location":"Loops_Scripts/#loops","title":"Loops","text":"<p>Loops are used to execute a block of code repeatedly. The most common loops are <code>for</code> and <code>while</code>:</p> <ul> <li>The <code>for</code> loop is used to iterate over a list of items.</li> <li>The <code>while</code> loop is used to execute a block of code as long as a condition is met.</li> </ul> <p>For example, the following code will print the names of all the files in the current directory:</p> <pre><code>for file in *; do\necho $file\ndone\n</code></pre>"},{"location":"Loops_Scripts/#functions","title":"Functions","text":"<p>Functions are used to group together a set of commands that can be executed repeatedly. To define a function, you use the following syntax:</p> <pre><code>function_name() {\n&lt;block of code&gt;\n}\n</code></pre> <p>For example, the following code defines a function named <code>greet</code> that prints the message \"Hello, world!\" to the console:</p> <pre><code>function greet() {\necho \"Hello, world!\"\n}\n</code></pre> <p>You can then call the function by using its name. For example, the following code will call the <code>greet</code> function:</p> <pre><code>greet\n</code></pre>"},{"location":"Loops_Scripts/#output-redirection","title":"Output redirection","text":"<p>Output redirection is used to redirect the output of a command to a file. To redirect output to a file, you use the following syntax:</p> <pre><code>command &gt; output_file\n</code></pre> <p>For example, the following code will redirect the output of the <code>ls</code> command to the file <code>list.txt</code>:</p> <pre><code>ls &gt; list.txt\n</code></pre>"},{"location":"Loops_Scripts/#input-redirection","title":"Input redirection","text":"<p>Input redirection is used to redirect input to a command from a file. To redirect input from a file, you use the following syntax:</p> <pre><code>command &lt; input_file\n</code></pre> <p>For example, the following code will read the contents of the file <code>list.txt</code> and print them to the console:</p> <pre><code>cat list.txt\n</code></pre>"},{"location":"Loops_Scripts/#error-handling","title":"Error handling","text":"<p>Error handling is used to deal with errors that occur in shell scripts. The most common way to handle errors is to use the <code>try</code> and <code>catch</code> statements:</p> <ul> <li>The <code>try</code> statement is used to execute a block of code.</li> <li>The <code>catch</code> statement is used to handle errors that occur in the try block.</li> </ul> <p>For example, the following code will try to create a directory named <code>new_dir</code>. If the directory already exists.</p>"},{"location":"Loops_Scripts/#examples-of-bash-in-bioinformatics","title":"Examples of Bash in Bioinformatics","text":"<ul> <li>Introduction To Bash: Using the Terminal For Bioinformatics. University of Adelaide.</li> <li>Process fasta script. Pavlo Hrab.</li> <li>Samtools: faidx</li> </ul>"},{"location":"Loops_Scripts/#references","title":"References","text":"<ul> <li>The Command Line Interface Shell</li> <li>UNIX Shell Command Line Programming</li> <li>Loops</li> <li>explainshell.com</li> </ul> <p>Created: 05/16/2023: Updated: 05/17/2023</p> <p>Carlos Liz\u00e1rraga</p>"},{"location":"Pipes_Filters/","title":"Pipes and Filters in Unix","text":""},{"location":"Pipes_Filters/#common-unix-command-used-as-pipes-and-filters","title":"Common Unix command used as pipes and filters","text":"<p>The most common pipes and filters used in Unix are:</p> Command Description <code>grep</code> Text search utility that can be used to find specific patterns of text in a file or stream <code>sort</code> Utility that can be used to sort the lines of a file <code>uniq</code> Utility that can be used to remove duplicate lines from a file <code>head</code> Utility that can be used to print the first few lines of a file <code>tail</code> Utility that can be used to print the last few lines of a file <code>wc</code> Utility that can be used to count the number of lines, words, and characters in a file <p>These utilities can be combined to create powerful pipelines that can be used to perform a variety of tasks.</p>"},{"location":"Pipes_Filters/#examples","title":"Examples","text":"Command Description <code>grep -n hello file.txt</code> Find all of the occurrences of the word \"hello\" in a file and print the line numbers <code>sort file.txt | head -10</code> Sort the lines of a file and then print the first 10 lines <code>sort file.txt | uniq -d</code> Find all of the duplicate lines in a file and print them"},{"location":"Pipes_Filters/#the-use-of-pipes-tee-and-in-unix","title":"The use of pipes '|','&gt;', 'tee',  and '&gt;&gt; ' in Unix","text":""},{"location":"Pipes_Filters/#pipes","title":"Pipes ('|')","text":"<p>A pipe is a way of connecting the output of one command to the input of another command. This allows you to chain together commands and perform complex operations on data.</p> <pre><code>ls -1 | sort </code></pre> <p>The <code>ls</code> command will list the files in the current directory, and the <code>sort</code> command will sort the list by name. The output of the <code>ls</code> command will be piped to the input of the <code>sort</code> command, so that sort can operate on the list of files.</p>"},{"location":"Pipes_Filters/#redirection","title":"Redirection ('&gt;')","text":"<p>Redirection is a way of changing the destination of a command's output. This can be used to save the output of a command to a file, or to display the output on the screen.</p> <pre><code>ls -1 &gt; files.txt\n</code></pre> <p>The ls command will list the files in the current directory, and the output will be redirected to the file files.txt.</p>"},{"location":"Pipes_Filters/#tee","title":"tee","text":"<p>The tee command is a utility that can be used to copy the output of a command to multiple destinations. This can be useful for logging output to a file, or for sending output to both the screen and a file.</p> <pre><code>ls -1 | tee files.txt\n</code></pre> <p>The <code>ls</code> command will list the files in the current directory, and the output will be sent to both the screen and the file <code>files.txt</code>.</p>"},{"location":"Pipes_Filters/#append-redirection","title":"Append redirection ('&gt;&gt;')","text":"<p>Append redirection is a way of adding the output of a command to the end of a file. This can be used to append the output of a command to an existing file, or to create a new file with the output of a command.</p> <pre><code>ls -1 &gt;&gt; files.txt\n</code></pre> <p>The <code>ls</code> command will list the files in the current directory, and the output will be appended to the file <code>files.txt</code>.</p>"},{"location":"Pipes_Filters/#examples-of-pipes","title":"Examples of pipes","text":"<p>Some examples of how pipes, redirection, and <code>tee</code> can be used together:</p> Command Description <code>ls -1 &gt;&gt; files.txt</code> list all of the files in the current directory and append the list to the file <code>files.txt</code> <code>ls -1 | grep hello</code> find all of the files in the current directory that contain the word \"hello\" <code>sort file.txt | head -10</code> sort the lines of a file and then print the first 10 lines <code>sort file.txt | uniq -d</code> find all of the duplicate lines in a file and print them <code>command | tee log.txt</code> log the output of a command to a file <code>command | tee -a screen.txt</code> send the output of a command to both the screen and a file"},{"location":"Pipes_Filters/#references","title":"References","text":"<ul> <li>The Command Line Interface Shell</li> <li>Pipes and Filters</li> <li>explainshell.com</li> </ul> <p>Created: 05/13/2023: Updated: 05/15/2023</p> <p>Carlos Liz\u00e1rraga</p>"},{"location":"UnixShell/","title":"Unix Shell and Unix Filesystem","text":""},{"location":"UnixShell/#unix-and-unix-like-operating-systems","title":"Unix and Unix-like operating systems","text":"<p>For clarity, Unix is a family of multitasking, multi-user computer operating system. There is a large family of Unix-like operating systems.</p> <p>Some well-known cases of Unix-like operating systems are Linux and BSD.</p>"},{"location":"UnixShell/#sessions-in-unixlinux","title":"Sessions in UNIX/Linux","text":"<p>To work in a terminal, we need to have a valid username, in order to begin a session via the <code>login</code> command.</p> <p>If using VSCode we can launch a new terminal from the \"Hamburguer Menu\" as shown in the next figure</p> <p></p> <p>The new terminal will open in the lower right part of the VSCode interface.</p> <p></p> <p>The terminal is ready for user input.</p> <p> To end the session enter the <code>exit</code> command. It will finish the session and close the terminal.</p>"},{"location":"UnixShell/#the-command-shell-or-command-line-interpreter","title":"The Command Shell or Command Line Interpreter","text":"<p>In the background a Command shell is running. To find out which shell is active we can type the following command after the system prompt <code>$</code>.</p> <pre><code>echo $SHELL\n</code></pre> <p>which will return the command shell program, <code>/bin/bash</code>, in the Codespaces terminal. This is Bash (Bourne Again Shell), which is derived from the original shell <code>/bin/sh</code>. In other system environments, maybe you will encounter other similar shells (<code>/bin/csh</code>, <code>/bin/tcsh</code>, <code>/bin/ksh</code>, <code>/bin/zsh</code>, and others).</p> <p>The command shell serves as an intermediary between the user and the Operating System Kernel, which controls all the available computer resources.</p> <p></p>"},{"location":"UnixShell/#read-more-on-the-unix-shell","title":"Read more on the Unix Shell","text":""},{"location":"UnixShell/#files-and-directories","title":"Files and Directories","text":"<p>The Unix filesystem is considered as the central component of the operating system. The filesystem provides storage and retrieval for other programs to read them. The filesystem also provides access to other resources, for example the device files, terminals, printers, computer mice, and many other.</p> Directory or file Description <code>/</code> The root directory is the top-level directory in the Unix file system. <code>/bin</code> The bin directory contains executable programs. <code>/dev</code> The dev directory contains device files. <code>/lib</code> The lib directory contains libraries. <code>man</code> The man directory contains manual pages. <code>/etc</code> The etc directory contains configuration files. <code>/home</code> The home directory is the default directory for each user. <code>/tmp</code> The tmp directory is a temporary directory where files can be created and deleted without affecting the rest of the file system. <code>/usr</code> The usr directory contains system files that are shared by all users. <code>/var</code> The var directory contains files that can vary in size, such as log files and mail files. <p>The Unix file system is a hierarchical structure, with each directory containing a set of files and subdirectories. The root directory is the top-level directory, and all other directories are below it.</p> <p></p> <p>(See a larger image)</p>"},{"location":"UnixShell/#first-steps-manual-pages-and-getting-help","title":"First steps: Manual pages and getting help","text":"<p>In general, almost all Unix systems include their manual pages of system commands.</p> Commands Description <code>man command</code> Online manual pages <code>apropos keyword</code> Searches keyword in manual pages <code>command --help</code> Show how to use command <code>more filename</code> Show contents of a text file <code>less filename</code> Show content of a text file <p>The <code>more</code> and <code>less</code> commands show the contents of a file. The following commands control the flow of information.</p> Command Action in <code>less</code> / <code>more</code> <code>d</code> or <code>Space bar</code> page down <code>u</code> page up (less) <code>p</code> beginning of file <code>G</code> End of file <code>q</code> Quit and exit"},{"location":"UnixShell/#ls-listing-files-in-directories","title":"ls: Listing files in directories","text":"<p>The <code>ls</code> command, lists all the contents of a directory.</p> <p>For example <code>ls -al</code> will list  all files in a directory in long format, including hidden files (those files whose name starts with a dot <code>.</code>)</p> <p>Try <code>ls --help</code> to show you all the available options of the command.</p> <p>The command <code>ls -al */*</code> shows all the contents of a directory and subdirectories next level down.</p>"},{"location":"UnixShell/#pwd-prints-presentworking-directory","title":"pwd: Prints present/working directory","text":"<p>The <code>pwd</code> command, will show the current position in the directory structure.</p>"},{"location":"UnixShell/#cd-change-the-working-directory","title":"cd: Change the working directory","text":"<p>The <code>cd</code> command, will help you navigate in the directory structure.</p> <p>Common commands</p> Command Action <code>cd</code> A blank option takes you to your <code>HOME</code> directory <code>cd ~</code> Same as above, takes you to your <code>HOME</code> directory (where <code>~</code> is aka tilde) <code>cd ..</code> Moves you up, to the parent directory <code>cd ../..</code> Moves you up two levels <code>cd -</code> Moves you to the previous working directory"},{"location":"UnixShell/#see-more-unix-shell-commands-here","title":"See more Unix Shell Commands here","text":""},{"location":"UnixShell/#references","title":"References","text":"<ul> <li>The Command Line Interface Shell</li> <li>Introducing the Shell</li> <li>Navigating Files and Directories</li> <li>explainshell.com</li> </ul> <p>Created: 05/13/2023: Updated: 05/15/2023</p> <p>Carlos Liz\u00e1rraga</p>"},{"location":"images/","title":"Index","text":"<p>Images used in this repository</p>"}]}